{"version":3,"sources":["shared/tab_page/styles.module.css","pages/summary/styles.module.css","shared/delete_button/styles.module.css","shared/tab_page/index.tsx","shared/default_data/index.ts","shared/store/index.tsx","pages/summary/index.tsx","shared/delete_button/index.tsx","pages/categories_list/index.tsx","pages/cards_edit/Label.tsx","pages/cards_edit/EditCategories.tsx","pages/cards_edit/AddCategoryAlert.tsx","pages/cards_edit/CardsEdit.tsx","pages/cards_list/index.tsx","routes.ts","index.tsx","pages/cards_edit/styles.module.css"],"names":["module","exports","TabPage","props","renderToolbar","backButtonText","className","title","rightButton","styles","pageContent","children","cashbackCategory1","id","name","cashbackCategory2","cashbackCategory3","cards","bank","basePercent","cashbackCategories","category","percent","categories","StoreContext","React","createContext","setCards","setCategories","StoreProvider","useState","setCardsState","setCategoriesState","useEffect","storedCards","store","get","defaultCards","storedCategories","defaultCategories","Provider","value","set","SummaryListItem","cardNames","map","card","join","classnames","Summary","useContext","summaryData","bestBasePercent","bestBasePercentCards","bestPercent","bestCards","forEach","push","cashbackCategory","find","undefined","allCards","uniqueCards","Array","from","Set","calculateSummaryData","dataSource","renderRow","row","DeleteButton","confirm","showDeleteConfirmation","setShowDeleteConfirmation","Fragment","deleteButton","modifier","onClick","e","stopPropagation","icon","isOpen","onCancel","CategoriesList","editedCategory","setEditedCategory","renderFooter","tappable","updatedCategories","filter","c","placeholder","onChange","target","newCategory","existingIds","newId","length","Math","max","getUpdatedCategories","Label","leftLabel","leftLabelLong","long","EditCategories","renderHeader","String","parseInt","float","AddCategoryAlert","setCategory","setPercent","onClose","addCategoryAlertContent","categoryId","selectedCategory","type","event","onSave","defaultCard","CardsListItem","navigator","pushPage","component","routes","cardsEdit","onDelete","cardsList","updatedCards","setName","setBank","setBasePercent","setCashbackCategories","showAddCategoryAlert","setShowAddCategoryAlert","newCard","getUpdatedCards","popPage","categoriesList","summary","renderPage","route","key","createElement","App","index","position","renderTabs","content","animation","initialRoute","tab","label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d949ca4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContent\":\"styles_pageContent__306IV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"percent\":\"styles_percent__1Icnb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteButton\":\"styles_deleteButton__18buj\"};","import React from \"react\";\nimport { BackButton, Page, Toolbar } from \"react-onsenui\";\nimport styles from \"./styles.module.css\";\n\ninterface TabPageProps {\n  children: React.ReactNode;\n  title?: string;\n  backButtonText?: string;\n  rightButton?: React.ReactNode;\n}\n\nexport function TabPage(props: TabPageProps) {\n  return (\n    <Page\n      renderToolbar={() => (\n        <Toolbar>\n          {props.backButtonText && (\n            <div className=\"left\">\n              <BackButton>{props.backButtonText}</BackButton>\n            </div>\n          )}\n          <div className=\"center\">{props.title}</div>\n          {props.rightButton && (\n            <div className=\"right\">{props.rightButton}</div>\n          )}\n        </Toolbar>\n      )}\n    >\n      <div className={styles.pageContent}>{props.children}</div>\n    </Page>\n  );\n}\n","import { Card, Category } from \"src/types\";\n\nconst cashbackCategory1: Category = {\n  id: 1,\n  name: \"Category 1\",\n};\n\nconst cashbackCategory2: Category = {\n  id: 2,\n  name: \"Category 2\",\n};\n\nconst cashbackCategory3: Category = {\n  id: 3,\n  name: \"Category 3\",\n};\n\nexport const card1: Card = {\n  id: 1,\n  name: \"Card 1\",\n  bank: \"Bank 1\",\n  basePercent: 2,\n  cashbackCategories: [\n    { category: cashbackCategory1, percent: 5 },\n    { category: cashbackCategory2, percent: 10 },\n    { category: cashbackCategory3, percent: 2 },\n  ],\n};\n\nconst card2: Card = {\n  id: 2,\n  name: \"Card 2\",\n  bank: \"Bank 2\",\n  basePercent: 1,\n  cashbackCategories: [\n    { category: cashbackCategory1, percent: 5 },\n  ],\n};\n\nexport const cards: Card[] = [card1, card2];\n\nexport const categories: Category[] = [\n  cashbackCategory1,\n  cashbackCategory2,\n  cashbackCategory3,\n];\n","import React, { useEffect, useState } from \"react\";\nimport { Card, Category } from \"src/types\";\nimport {\n  cards as defaultCards,\n  categories as defaultCategories,\n} from \"src/shared/default_data\";\nimport store from \"store\";\n\ninterface StoreContextProps {\n  cards: Card[];\n  setCards: (cards: Card[]) => void;\n  categories: Category[];\n  setCategories: (categories: Category[]) => void;\n}\n\nexport const StoreContext = React.createContext<StoreContextProps>({\n  cards: [],\n  setCards: () => {},\n  categories: [],\n  setCategories: () => {},\n});\n\nexport function StoreProvider(props: { children: React.ReactNode }) {\n  const [cards, setCardsState] = useState<Card[]>([]);\n  const [categories, setCategoriesState] = useState<Category[]>([]);\n\n  useEffect(() => {\n    const storedCards: Card[] = store.get(\"cards\", defaultCards);\n    setCardsState(storedCards);\n\n    const storedCategories: Category[] = store.get(\n      \"categories\",\n      defaultCategories\n    );\n    setCategoriesState(storedCategories);\n  }, []);\n\n  const setCards = (cards: Card[]) => {\n    setCardsState(cards);\n    store.set(\"cards\", cards);\n  };\n\n  const setCategories = (categories: Category[]) => {\n    setCategoriesState(categories);\n    store.set(\"categories\", categories);\n  };\n\n  return (\n    <StoreContext.Provider\n      value={{ cards, setCards, categories, setCategories }}\n    >\n      {props.children}\n    </StoreContext.Provider>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { List, ListItem } from \"react-onsenui\";\nimport { TabPage } from \"src/shared/tab_page\";\nimport { Category, Card } from \"src/types\";\nimport classnames from \"classnames\";\nimport styles from \"./styles.module.css\";\nimport { StoreContext } from \"src/shared/store\";\n\ninterface SummaryListItemProps {\n  category: Category;\n  cards: Card[];\n  percent: number;\n}\n\nfunction SummaryListItem(props: SummaryListItemProps) {\n  const cardNames = props.cards.map((card) => card.name).join(\", \");\n\n  return (\n    <ListItem>\n      <div className=\"center\">{props.category.name}</div>\n      <div className=\"right\">\n        <div>\n          <div className=\"list-item__title\">{cardNames}</div>\n          <div className={classnames(\"list-item__subtitle\", styles.percent)}>\n            {props.percent}%\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n}\n\nfunction calculateSummaryData(\n  categories: Category[],\n  cards: Card[]\n): {\n  category: Category;\n  cards: Card[];\n  percent: number;\n}[] {\n  return categories.map((category) => {\n    // store the cards with the best base cashback percent\n    let bestBasePercent: number = 0;\n    let bestBasePercentCards: Card[] = [];\n\n    // store the cards with the best cashback percent in their cashback categories\n    let bestPercent: number = 0;\n    let bestCards: Card[] = [];\n\n    cards.forEach((card) => {\n      // if the card has the same base percent as already stored one(s), add it to bestBasePercentCards\n      if (card.basePercent === bestBasePercent) {\n        bestBasePercentCards.push(card);\n      }\n\n      // if the card has a better base percent than already stored card(s) with best basePercent,\n      // replace bestBasePercentCards with it\n      if (card.basePercent > bestBasePercent) {\n        bestBasePercent = card.basePercent;\n        bestBasePercentCards = [card];\n      }\n\n      // check if the card has this cashback category\n      const cashbackCategory = card.cashbackCategories.find(\n        (cashbackCategory) => cashbackCategory.category.id === category.id\n      );\n\n      // skip cards not having this cashback category\n      if (cashbackCategory === undefined) {\n        return;\n      }\n\n      // if the card has a better cashback percent than already stored best card(s), replace bestCards with it\n      if (cashbackCategory.percent > bestPercent) {\n        bestPercent = cashbackCategory.percent;\n        bestCards = [card];\n        return;\n      }\n\n      // if the card has the same cashback percent as already stored best card(s), add it to bestCards\n      if (cashbackCategory.percent === bestPercent) {\n        bestCards.push(card);\n        return;\n      }\n    });\n\n    // if the best percent found in cashback categories is better than the best base percent found,\n    // return the cards having this cashback percent in their cashback categories\n    if (bestPercent > bestBasePercent) {\n      return {\n        category,\n        percent: bestPercent,\n        cards: bestCards,\n      };\n    }\n\n    // if the best base percent is better than the best percent found in cashback categories,\n    // return the cards having this base percent\n    if (bestBasePercent > bestPercent) {\n      return {\n        category,\n        percent: bestBasePercent,\n        cards: bestBasePercentCards,\n      };\n    }\n\n    // if the best percent found in cashback categories is equal to the best base percent,\n    // return all cards that have this percent, no matter where - in cashback categories or in base percent\n    const allCards: Card[] = [...bestCards, ...bestBasePercentCards];\n\n    // return only unique cards because a card can have the same percent in basePercent and in a category\n    // without this, the same card would be included twice\n    const uniqueCards: Card[] = Array.from(new Set(allCards));\n\n    return {\n      category,\n      percent: bestPercent,\n      cards: uniqueCards,\n    };\n  });\n}\n\nexport function Summary() {\n  const { cards, categories } = useContext(StoreContext);\n\n  const summaryData: {\n    category: Category;\n    cards: Card[];\n    percent: number;\n  }[] = calculateSummaryData(categories, cards);\n\n  return (\n    <TabPage title=\"Summary\">\n      <List\n        dataSource={summaryData}\n        renderRow={(row) => (\n          <SummaryListItem\n            key={row.category.id}\n            category={row.category}\n            cards={row.cards}\n            percent={row.percent}\n          />\n        )}\n      />\n    </TabPage>\n  );\n}\n","import React from \"react\";\nimport { AlertDialog, Button, Icon } from \"react-onsenui\";\nimport styles from \"./styles.module.css\";\n\ninterface DeleteButtonProps {\n  confirm?: boolean;\n  onClick: () => void;\n}\n\nexport function DeleteButton(props: DeleteButtonProps) {\n  const { confirm = true } = props;\n\n  const [\n    showDeleteConfirmation,\n    setShowDeleteConfirmation,\n  ] = React.useState<boolean>(false);\n\n  return (\n    <React.Fragment>\n      <Button\n        className={styles.deleteButton}\n        modifier=\"quiet\"\n        onClick={(e) => {\n          e?.stopPropagation();\n          confirm ? setShowDeleteConfirmation(true) : props.onClick();\n        }}\n      >\n        <Icon icon=\"fa-trash-alt\" />\n      </Button>\n      <AlertDialog\n        isOpen={showDeleteConfirmation}\n        onCancel={() => setShowDeleteConfirmation(false)}\n        modifier=\"rowfooter\"\n      >\n        <div className=\"alert-dialog-title\">Are you sure?</div>\n        <div className=\"alert-dialog-content\">\n          The item will be deleted permanently\n        </div>\n        <div className=\"alert-dialog-footer\">\n          <Button\n            onClick={() => setShowDeleteConfirmation(false)}\n            // the --rowfooter modifier is not applied automatically for some reason\n            // added it manually here and in the button below\n            className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              setShowDeleteConfirmation(false);\n              props.onClick();\n            }}\n            className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n          >\n            Ok\n          </Button>\n        </div>\n      </AlertDialog>\n    </React.Fragment>\n  );\n}\n","import { AlertDialog, Button, Input, List, ListItem } from \"react-onsenui\";\nimport { TabPage } from \"src/shared/tab_page\";\nimport { Category } from \"src/types\";\nimport React, { useContext } from \"react\";\nimport { DeleteButton } from \"src/shared/delete_button\";\nimport { StoreContext } from \"src/shared/store\";\n\nfunction getUpdatedCategories(categories: Category[], newCategory: Category) {\n  // insert a new category if the id equals to 0\n  if (newCategory.id === 0) {\n    const existingIds: number[] = categories.map((c) => c.id);\n    const newId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\n    const updatedCategories = [...categories, { ...newCategory, id: newId }];\n    return updatedCategories;\n  }\n\n  // update the existing category if the id is not 0\n  const updatedCategories = categories.map((c) => {\n    if (c.id === newCategory.id) {\n      return newCategory;\n    }\n    return c;\n  });\n  return updatedCategories;\n}\n\nexport function CategoriesList() {\n  const [editedCategory, setEditedCategory] = React.useState<Category | null>(\n    null\n  );\n\n  const { categories, setCategories } = useContext(StoreContext);\n\n  return (\n    <TabPage title=\"Categories\">\n      <List\n        dataSource={categories}\n        renderFooter={() => (\n          <ListItem>\n            <Button\n              onClick={() => {\n                setEditedCategory({ id: 0, name: \"\" });\n              }}\n              modifier=\"large\"\n            >\n              Add category\n            </Button>\n          </ListItem>\n        )}\n        renderRow={(row) => (\n          <ListItem\n            key={row.id}\n            tappable\n            onClick={() => {\n              setEditedCategory(row);\n            }}\n          >\n            <div className=\"center\">{row.name}</div>\n            <div className=\"right\">\n              <DeleteButton\n                onClick={() => {\n                  const updatedCategories = categories.filter(\n                    (c) => c.id !== row.id\n                  );\n                  setCategories(updatedCategories);\n                }}\n              />\n            </div>\n          </ListItem>\n        )}\n      />\n      <AlertDialog\n        isOpen={editedCategory !== null}\n        onCancel={() => setEditedCategory(null)}\n        modifier=\"rowfooter\"\n      >\n        <div className=\"alert-dialog-title\">Category Name</div>\n        <div className=\"alert-dialog-content\">\n          <Input\n            placeholder=\"Type here\"\n            modifier=\"underbar\"\n            value={editedCategory === null ? \"\" : editedCategory.name}\n            onChange={(e) => {\n              if (editedCategory !== null) {\n                setEditedCategory({\n                  ...editedCategory,\n                  name: e.target.value,\n                });\n              }\n            }}\n          />\n        </div>\n        <div className=\"alert-dialog-footer\">\n          <Button\n            onClick={() => setEditedCategory(null)}\n            // the --rowfooter modifier is not applied automatically for some reason\n            // added it manually here and in the button below\n            className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (editedCategory === null) {\n                return;\n              }\n\n              const updatedCategories = getUpdatedCategories(\n                categories,\n                editedCategory\n              );\n              setCategories(updatedCategories);\n              setEditedCategory(null);\n            }}\n            className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n          >\n            Ok\n          </Button>\n        </div>\n      </AlertDialog>\n    </TabPage>\n  );\n}\n","import React from \"react\";\nimport styles from \"./styles.module.css\";\nimport classnames from \"classnames\";\n\nexport function Label(props: { children: React.ReactNode; long?: boolean }) {\n  return (\n    <div\n      className={classnames(\"left\", styles.leftLabel, {\n        [styles.leftLabelLong]: props.long,\n      })}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Input, List, ListItem, ListHeader } from \"react-onsenui\";\nimport { DeleteButton } from \"src/shared/delete_button\";\nimport { Category } from \"src/types\";\nimport { Label } from \"./Label\";\n\ninterface EditCategoriesProps {\n  categories: { category: Category; percent: number }[];\n  onChange: (categories: { category: Category; percent: number }[]) => void;\n}\n\nexport function EditCategories(props: EditCategoriesProps) {\n  const { categories, onChange } = props;\n\n  return (\n    <List\n      dataSource={categories}\n      renderHeader={() => <ListHeader>Cashback Categories</ListHeader>}\n      renderRow={(cashbackCategory) => (\n        <ListItem key={cashbackCategory.category.id}>\n          <Label long>{cashbackCategory.category.name}</Label>\n          <div className=\"center\">\n            <Input\n              value={String(cashbackCategory.percent)}\n              onChange={(e) => {\n                onChange(\n                  categories.map((c) => {\n                    if (c.category.id !== cashbackCategory.category.id) {\n                      return c;\n                    }\n\n                    return {\n                      ...c,\n                      percent: parseInt(e.target.value) || 0,\n                    };\n                  })\n                );\n              }}\n              float\n              placeholder=\"Cashback %\"\n            />\n          </div>\n          <div className=\"right\">\n            <DeleteButton\n              confirm={false}\n              onClick={() => {\n                onChange(\n                  categories.filter(\n                    (c) => c.category.id !== cashbackCategory.category.id\n                  )\n                );\n              }}\n            />\n          </div>\n        </ListItem>\n      )}\n    />\n  );\n}\n","import React, { useContext, useEffect } from \"react\";\nimport { Category } from \"src/types\";\nimport { Button, Input, AlertDialog, Select, Row } from \"react-onsenui\";\nimport styles from \"./styles.module.css\";\nimport classnames from \"classnames\";\nimport { StoreContext } from \"src/shared/store\";\n\ninterface AddCategoryAlertProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (params: { category: Category; percent: number }) => void;\n}\n\nexport function AddCategoryAlert(props: AddCategoryAlertProps) {\n  const [category, setCategory] = React.useState<Category | null>(null);\n  const [percent, setPercent] = React.useState<string>(\"\");\n\n  const { categories } = useContext(StoreContext);\n\n  // reset the state every time props.isOpen changes from false to true\n  useEffect(() => {\n    if (!props.isOpen) {\n      return;\n    }\n\n    setCategory(null);\n    setPercent(\"\");\n  }, [props.isOpen]);\n\n  return (\n    <AlertDialog\n      isOpen={props.isOpen}\n      onCancel={props.onClose}\n      modifier=\"rowfooter\"\n    >\n      <div className=\"alert-dialog-title\">Add cashback category</div>\n      <div\n        className={classnames(\n          \"alert-dialog-content\",\n          styles.addCategoryAlertContent\n        )}\n      >\n        <Row>\n          <Select\n            value={category !== null ? String(category.id) : \"\"}\n            onChange={(e) => {\n              if (categories === undefined) {\n                return;\n              }\n\n              const categoryId = parseInt(e.target.value);\n              const selectedCategory = categories.find(\n                (c) => c.id === categoryId\n              );\n\n              setCategory(selectedCategory || null);\n            }}\n          >\n            <option value=\"\">Select category</option>\n            {categories.map((category) => (\n              <option key={category.id} value={category.id}>\n                {category.name}\n              </option>\n            ))}\n          </Select>\n          <Input\n            value={percent}\n            type=\"number\"\n            modifier=\"underbar\"\n            float\n            onChange={(event) => {\n              setPercent(event.target.value);\n            }}\n            placeholder=\"Cashback %\"\n          />\n        </Row>\n      </div>\n      <div className=\"alert-dialog-footer\">\n        <Button\n          onClick={props.onClose}\n          // the --rowfooter modifier is not applied automatically for some reason\n          // added it manually here and in the button below\n          className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={() => {\n            // Category and percent fields are required\n            if (category === null || percent === \"\") {\n              return;\n            }\n\n            props.onSave({\n              category,\n              percent: parseInt(percent) || 0,\n            });\n            props.onClose();\n          }}\n          className=\"alert-dialog-button alert-dialog-button--rowfooter\"\n        >\n          Ok\n        </Button>\n      </div>\n    </AlertDialog>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Card, Category } from \"src/types\";\nimport { TabPage } from \"src/shared/tab_page\";\nimport {\n  Button,\n  Input,\n  List,\n  ListItem,\n  ToolbarButton,\n  Navigator,\n} from \"react-onsenui\";\nimport { EditCategories } from \"./EditCategories\";\nimport { AddCategoryAlert } from \"./AddCategoryAlert\";\nimport { Label } from \"./Label\";\nimport { StoreContext } from \"src/shared/store\";\n\nfunction getUpdatedCards(cards: Card[], newCard: Card) {\n  // insert a new card if the id equals to 0\n  if (newCard.id === 0) {\n    const existingIds: number[] = cards.map((c) => c.id);\n    const newId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\n    const updatedCards = [...cards, { ...newCard, id: newId }];\n    return updatedCards;\n  }\n\n  // update the existing card if the id is not 0\n  const updatedCards = cards.map((c) => {\n    if (c.id === newCard.id) {\n      return newCard;\n    }\n    return c;\n  });\n  return updatedCards;\n}\n\n// defaultCard is used when a new card is added\nconst defaultCard: Card = {\n  id: 0,\n  name: \"\",\n  bank: \"\",\n  basePercent: 0,\n  cashbackCategories: [],\n};\n\ninterface CardsEditProps {\n  navigator: Navigator;\n  card?: Card;\n}\n\nexport function CardsEdit(props: CardsEditProps) {\n  const { card = defaultCard, navigator } = props;\n  const { id } = card;\n\n  const [name, setName] = React.useState<string>(card.name);\n  const [bank, setBank] = React.useState<string>(card.bank);\n  const [basePercent, setBasePercent] = React.useState<string>(\n    String(card.basePercent)\n  );\n  const [cashbackCategories, setCashbackCategories] = React.useState<\n    {\n      category: Category;\n      percent: number;\n    }[]\n  >(card.cashbackCategories);\n  const [\n    showAddCategoryAlert,\n    setShowAddCategoryAlert,\n  ] = React.useState<boolean>(false);\n\n  const { cards, setCards } = useContext(StoreContext);\n\n  return (\n    <TabPage\n      backButtonText=\"All Cards\"\n      rightButton={\n        <ToolbarButton\n          onClick={() => {\n            const card = {\n              id,\n              name,\n              bank,\n              basePercent: parseInt(basePercent) || 0,\n              cashbackCategories,\n            };\n            setCards(getUpdatedCards(cards, card));\n            navigator.popPage();\n          }}\n        >\n          Save\n        </ToolbarButton>\n      }\n    >\n      <List>\n        <ListItem>\n          <Label>Title</Label>\n          <div className=\"center\">\n            <Input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              float\n              placeholder=\"Card name\"\n            />\n          </div>\n        </ListItem>\n        <ListItem>\n          <Label>Bank</Label>\n          <div className=\"center\">\n            <Input\n              value={bank}\n              onChange={(e) => setBank(e.target.value)}\n              float\n              placeholder=\"Card bank\"\n            />\n          </div>\n        </ListItem>\n        <ListItem>\n          <Label>Cashback %</Label>\n          <div className=\"center\">\n            <Input\n              type=\"number\"\n              value={basePercent}\n              onChange={(e) => setBasePercent(e.target.value)}\n              float\n              placeholder=\"Base cashback %\"\n            />\n          </div>\n        </ListItem>\n      </List>\n\n      <EditCategories\n        categories={cashbackCategories}\n        onChange={setCashbackCategories}\n      />\n\n      <ListItem>\n        <Button modifier=\"large\" onClick={() => setShowAddCategoryAlert(true)}>\n          Add category\n        </Button>\n      </ListItem>\n\n      <AddCategoryAlert\n        isOpen={showAddCategoryAlert}\n        onClose={() => setShowAddCategoryAlert(false)}\n        onSave={(newCategory) => {\n          // don't add duplicate categories\n          if (\n            cashbackCategories.find(\n              (c) => c.category.id === newCategory.category.id\n            )\n          ) {\n            return;\n          }\n\n          setCashbackCategories([...cashbackCategories, newCategory]);\n        }}\n      />\n    </TabPage>\n  );\n}\n","import { Button, List, ListItem, Navigator } from \"react-onsenui\";\nimport { TabPage } from \"src/shared/tab_page\";\nimport { Card } from \"src/types\";\nimport React, { useContext } from \"react\";\nimport { routes } from \"src/routes\";\nimport { DeleteButton } from \"src/shared/delete_button\";\nimport { StoreContext } from \"src/shared/store\";\n\ninterface CardsListItemProps {\n  navigator: Navigator;\n  card: Card;\n  onDelete: () => void;\n}\n\nfunction CardsListItem(props: CardsListItemProps) {\n  const { card } = props;\n\n  return (\n    <ListItem\n      tappable\n      onClick={() => {\n        props.navigator.pushPage({\n          component: routes.cardsEdit,\n          props: { card },\n        });\n      }}\n    >\n      <div className=\"center\">\n        <span className=\"list-item__title\">{card.name}</span>\n        <span className=\"list-item__subtitle\">{card.bank}</span>\n      </div>\n      <div className=\"right\">\n        <DeleteButton onClick={props.onDelete} />\n      </div>\n    </ListItem>\n  );\n}\n\ninterface CardsListProps {\n  navigator: Navigator;\n}\n\nexport function CardsList(props: CardsListProps) {\n  const { cards, setCards } = useContext(StoreContext);\n\n  return (\n    <TabPage title=\"Cards\">\n      <List\n        dataSource={cards}\n        renderFooter={() => (\n          <ListItem>\n            <Button\n              onClick={() => {\n                props.navigator.pushPage({ component: routes.cardsEdit });\n              }}\n              modifier=\"large\"\n            >\n              Add card\n            </Button>\n          </ListItem>\n        )}\n        renderRow={(card) => (\n          <CardsListItem\n            key={card.id}\n            navigator={props.navigator}\n            card={card}\n            onDelete={() => {\n              const updatedCards = cards.filter((c) => c.id !== card.id);\n              setCards(updatedCards);\n            }}\n          />\n        )}\n      />\n    </TabPage>\n  );\n}\n","import { Summary } from \"src/pages/summary\";\nimport { CategoriesList } from \"src/pages/categories_list\";\nimport { CardsEdit } from \"src/pages/cards_edit\";\nimport { CardsList } from \"src/pages/cards_list\";\n\nexport const routes: { [key: string]: React.ComponentType<any> } = {\n  cardsList: CardsList,\n  cardsEdit: CardsEdit,\n  categoriesList: CategoriesList,\n  summary: Summary,\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Summary } from \"src/pages/summary\";\nimport \"onsenui/css/onsenui.css\";\nimport \"onsenui/css/onsen-css-components.css\";\nimport { Navigator, Page, Tab, Tabbar } from \"react-onsenui\";\nimport { routes } from \"./routes\";\nimport { CategoriesList } from \"./pages/categories_list\";\nimport { StoreProvider } from \"./shared/store\";\n\nconst INITIAL_ACTIVE_TAB_INDEX: number = 1;\n\nfunction renderPage(route: any, navigator?: Navigator) {\n  const props = route.props || {};\n  props.navigator = navigator;\n  props.key = route.component.name;\n\n  return React.createElement(route.component, props);\n}\n\nfunction App() {\n  return (\n    <StoreProvider>\n      <Page>\n        <Tabbar\n          index={INITIAL_ACTIVE_TAB_INDEX}\n          position=\"bottom\"\n          renderTabs={() => [\n            {\n              content: (\n                <Navigator\n                  key=\"cards\"\n                  animation=\"lift\"\n                  initialRoute={{ component: routes.cardsList }}\n                  renderPage={renderPage}\n                />\n              ),\n              tab: <Tab key=\"cards\" label=\"Cards\" icon=\"md-card\" />,\n            },\n            {\n              content: <Summary key=\"summary\" />,\n              tab: <Tab key=\"summary\" label=\"Summary\" icon=\"md-local-atm\" />,\n            },\n            {\n              content: <CategoriesList key=\"categories\" />,\n              tab: (\n                <Tab key=\"categories\" label=\"Categories\" icon=\"md-view-list\" />\n              ),\n            },\n          ]}\n        />\n      </Page>\n    </StoreProvider>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftLabel\":\"styles_leftLabel__2snlM\",\"leftLabelLong\":\"styles_leftLabelLong__3BFjc\",\"addCategoryAlertContent\":\"styles_addCategoryAlertContent__30hMY\"};"],"sourceRoot":""}